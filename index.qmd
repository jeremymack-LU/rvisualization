---
title: "Data Visualization with R <br/><br/><br/><br/><br/>"
title-slide-attributes:
    data-background-image: images/lts_logo.jpg
    data-background-size: "30%"
    data-background-opacity: "0.90"
    data-background-position: "50% 45%"
format:
   revealjs:
     theme: [dark, custom.scss]
     code-fold: false
     slide-number: c
     controls: true
     css: custom.css
     menu: {
      side: 'left',
      numbers: true,
      markers: true,
      width: 'normal',
      hideMissingTitles: true,
      titleSelector: ''}
preview-links: auto
---

## About this presentation {data-menu-title="About"}

::: columns
-   This seminar is the third in a series on [**R programming**]{style="color:#edea2b"}.

-   It's targeted at people that took the previous seminars, or have programming experience.

::: fragment
-   By the end of this presentation, you should know about...

    1.  The Grammar of Graphics
    2.  Static Visualizations
        - Graphical and tabular
    3.  Dynamic Visualizations
        - Graphical and tabular
:::

::: fragment
-   Raw code available on [Github](https://github.com/jeremymack-LU/rvisualization/blob/main/index.qmd)
:::
:::

![](images/ggplot2_masterpiece.png){.absolute bottom="0" right="0" width="400"}

## Structure of the presentation {data-menu-title="Presentation outline"}

The presentation is split into five topics:

::: fragment
-   Topic 1:    The (layered) Grammar of Graphics
:::

::: fragment
-   Topic 2:    Static visualizations

-   Topic 3:    Dynamic visualizations

-   Topic 4:    Shiny Apps - a preview
:::

::: fragment
-   Topic 5:    Additional resources
:::

![](images/r_learners.png){.absolute bottom="0" right="0" width="50%" height="50%"}

## Data visualization with R {data-menu-title="Data workflow"}

::: {.r-stack}
![](images/data-science-wrangle1.png)

![](images/data-science-wrangle2.png){.fragment}

![](images/data-science-wrangle3.png){.fragment}

![](images/data-science-wrangle1.png){.fragment}

![](images/data-science-tidy.png){.fragment}
:::

## Data visualization with R {data-menu-title="Dinosaur"}
<br/>
<center><b>“The simple graph has brought more information to the data analyst’s mind<br/>than any other device.” - John Tukey</b></center>
<br/>
<center><img src="./images/dinosaur2.gif" alt="gif" height=200</></center>

# Topic 1 {data-menu-title="Topic 1"}

[The ([**layered**]{style="color:#edea2b"}) Grammar of Graphics]{style="font-size: 1.5em; text-align: center"}

## Topic 1: The ([**layered**]{style="color:#edea2b"}) Grammar of Graphics {data-menu-title="Grammar of Graphics"}

-   *The Grammar of Graphics*

-   Structure of data graphics

-   Foundation for modern applications and graphing software

    - Tableau
    - Vega-Lite
    - `ggplot2`

![](images/grammar.png){.absolute top="52" right="0" width="30%"}

## Topic 1: The ([**layered**]{style="color:#edea2b"}) Grammar of Graphics {data-menu-title="ggplot2"}

-   Tidyverse package - `ggplot2`

-   Implementation of the grammar of graphics

::: {.fragment .fade-out fragment-index=1} 
![](images/ggplot2_hex.png){.absolute top="52" right="0" width="30%"}
:::

::: {.fragment .fade-in-then-out fragment-index=1} 
-   Layered approach to building graphics
    
    - Data creates the base (tidy format)

![](images/ggplot2_2.png){.absolute top="52" right="0" width="35%"}
:::

::: {.fragment .fade-in-then-out fragment-index=2}

![](images/ggplot2_3.png){.absolute top="52" right="0" width="35%"}

::: {.absolute top="172" left="0"}
-   Layered approach to building graphics
    
    - [Data creates the base (tidy format)]{style="color:rgba(255,255,255, 0.3"}
    - Link variables to graphical properties
    
:::
:::

::: {.fragment .fade-in-then-out fragment-index=3}

![](images/ggplot2_4.png){.absolute top="52" right="0" width="35%"}

::: {.absolute top="172" left="0"}
-   Layered approach to building graphics
    
    - [Data creates the base (tidy format)]{style="color:rgba(255,255,255, 0.3"}
    - [Link variables to graphical properties]{style="color:rgba(255,255,255, 0.3"}
    - Transform data to displayed values

:::
:::

::: {.fragment .fade-in-then-out fragment-index=4}

![](images/ggplot2_5.png){.absolute top="52" right="0" width="35%"}

::: {.absolute top="172" left="0"}
-   Layered approach to building graphics
    
    - [Data creates the base (tidy format)]{style="color:rgba(255,255,255, 0.3"}
    - [Link variables to graphical properties]{style="color:rgba(255,255,255, 0.3"}
    - [Transform data to displayed values]{style="color:rgba(255,255,255, 0.3"}
    - Variable and property ranges

:::
:::

::: {.fragment .fade-in-then-out fragment-index=5}

![](images/ggplot2_6.png){.absolute top="52" right="0" width="35%"}

::: {.absolute top="172" left="0"}
-   Layered approach to building graphics
    
    - [Data creates the base (tidy format)]{style="color:rgba(255,255,255, 0.3"}
    - [Link variables to graphical properties]{style="color:rgba(255,255,255, 0.3"}
    - [Transform data to displayed values]{style="color:rgba(255,255,255, 0.3"}
    - [Variable and property ranges]{style="color:rgba(255,255,255, 0.3"}
    - Graphical representation of the data

:::
:::

::: {.fragment .fade-in-then-out fragment-index=6}

![](images/ggplot2_7.png){.absolute top="52" right="0" width="35%"}

::: {.absolute top="172" left="0"}
-   Layered approach to building graphics
    
    - [Data creates the base (tidy format)]{style="color:rgba(255,255,255, 0.3"}
    - [Link variables to graphical properties]{style="color:rgba(255,255,255, 0.3"}
    - [Transform data to displayed values]{style="color:rgba(255,255,255, 0.3"}
    - [Variable and property ranges]{style="color:rgba(255,255,255, 0.3"}
    - [Graphical representation of the data]{style="color:rgba(255,255,255, 0.3"}
    - Creates "small multiples"

:::
:::

::: {.fragment .fade-in-then-out fragment-index=7}

![](images/ggplot2_8.png){.absolute top="52" right="0" width="35%"}

::: {.absolute top="172" left="0"}
-   Layered approach to building graphics
    
    - [Data creates the base (tidy format)]{style="color:rgba(255,255,255, 0.3"}
    - [Link variables to graphical properties]{style="color:rgba(255,255,255, 0.3"}
    - [Transform data to displayed values]{style="color:rgba(255,255,255, 0.3"}
    - [Variable and property ranges]{style="color:rgba(255,255,255, 0.3"}
    - [Graphical representation of the data]{style="color:rgba(255,255,255, 0.3"}
    - [Creates "small multiples"]{style="color:rgba(255,255,255, 0.3"}
    - Sets unique position

:::
:::

::: {.fragment .fade-in fragment-index=8}

![](images/ggplot2_9.png){.absolute top="52" right="0" width="35%"}

::: {.absolute top="172" left="0"}
-   Layered approach to building graphics
    
    - [Data creates the base (tidy format)]{style="color:rgba(255,255,255, 0.3"}
    - [Link variables to graphical properties]{style="color:rgba(255,255,255, 0.3"}
    - [Transform data to displayed values]{style="color:rgba(255,255,255, 0.3"}
    - [Variable and property ranges]{style="color:rgba(255,255,255, 0.3"}
    - [Graphical representation of the data]{style="color:rgba(255,255,255, 0.3"}
    - [Creates "small multiples"]{style="color:rgba(255,255,255, 0.3"}
    - [Sets unique position]{style="color:rgba(255,255,255, 0.3"}
    - Defines the overall look of the plot

:::
:::

## Topic 1: The ([**layered**]{style="color:#edea2b"}) Grammar of Graphics {data-menu-title="ggplot2"}

![](images/ggplot2_10.png){.absolute top="52" right="0" width="35%"}

-   Tidyverse package - `ggplot2`

-   Implementation of the grammar of graphics

-   Layered approach to building graphics

    - Required arguments
    - Everything else has [**sensible defaults**]{style="color:#edea2b"}
    
::: fragment

![](images/ggplot.png){.absolute bottom="150" right="0" width="35%"}

-   Basic template has three functions:

    - `ggplot` - creates a blank canvas
    - `geom` - adds a layer
    - `aes` - visual properties of an object
:::

# Topic 2 {data-menu-title="Topic 2"}

[Static Visualizations]{style="font-size: 1.5em; text-align: center"}

## Topic 2: Static Visualizations {data-menu-title="Faithful"}
![](images/faithful_geyser.jpg){.absolute top="52" right="0" width="30%"}

-   Old Faithful dataset:

    - Geyser in Yellowstone National Park
    - Length of eruption time in minutes (eruptions)
    - Time until next eruption (waiting)

::: fragment
::: {.column width="60%"}
```{r}
#| echo: true
#| eval: true
tibble::as_tibble(faithful)
```
:::
:::

## Topic 2: Static Visualizations {data-menu-title="data"}
![](images/ggplot2_10.png){.absolute top="52" right="0" width="35%"}
![](images/ggplot.png){.absolute bottom="150" right="0" width="35%"}

-   Layered approach to building graphics:

::: {.fragment .fade-in fragment-index=1}
::: {.column width="60%"}
```{r}
#| echo: true
#| eval: false
# Load tidyverse into library
library(tidyverse)

# Create a blank ggplot canvas
ggplot(data=faithful)
```
:::
:::


::: {.fragment .fade-in-then-out fragment-index=2 .absolute top="90" left="100"}
```{r}
#| echo: false
#| eval: true
#| fig-width: 9
#| fig-height: 6
library(tidyverse)
ggplot(data=faithful)
```
:::

::: {.fragment .fade-in fragment-index=3}
::: {.column width="120"}
::: {.absolute top="117" left="0"}
```{r}
#| echo: true
#| eval: false
# Load tidyverse into library
library(tidyverse)

# Create a blank ggplot canvas
ggplot(data=faithful) +

# Add a geometric (geom) layer and map variables to     
# aesthetics (aes) function
geom_point(mapping=aes(x=eruptions,
                       y=waiting))
```
:::
:::
:::

::: {.fragment .fade-in-then-out fragment-index=4 .absolute top="90" left="100"}
```{r}
#| echo: false
#| eval: true
#| fig-width: 9
#| fig-height: 6
library(tidyverse)

# Create a blank ggplot canvas
ggplot(data=faithful) +

# Add a geometric (geom) layer and map variables to
# aesthetics (aes) function
geom_point(mapping=aes(x=eruptions,
                       y=waiting))
```
:::

## Topic 2: Static Visualizations {data-menu-title="mapping aes"}
![](images/ggplot2_10.png){.absolute top="52" right="0" width="35%"}
![](images/ggplot.png){.absolute bottom="150" right="0" width="35%"}

-   Layered approach to building graphics

-   Some things to remember:

    - Multiple ways to map variables
    
    ::: fragment
    1. Split mappings
    ```{r}
#| echo: true
#| eval: false
ggplot(data=faithful) +
geom_point(mapping=aes(x=eruptions,y=waiting))
    ```
    :::
    
    ::: fragment
    2. Mappings in `ggplot` function
    ```{r}
#| echo: true
#| eval: false
ggplot(
  data=faithful,
  mapping=aes(x=eruptions,y=waiting)) +
geom_point()
    ```
    :::
    
    ::: fragment
    3. Mappings in `geom` function
    ```{r}
#| echo: true
#| eval: false
ggplot() +
geom_point(
  data=faithful,
  mapping=aes(x=eruptions,y=waiting))
    ```
    :::
    
## Topic 2: Static Visualizations {data-menu-title="aes"}
![](images/ggplot2_10.png){.absolute top="52" right="0" width="35%"}
![](images/ggplot.png){.absolute bottom="150" right="0" width="35%"}

-   Layered approach to building graphics:

::: {.column width="60%"}
```{r}
#| echo: true
#| eval: false
# Load tidyverse into library
library(tidyverse)

# Create a blank ggplot canvas
ggplot(data=faithful) +

# Add a geometric (geom) layer and map variables to
# aesthetics (aes) function
geom_point(mapping=aes(x=eruptions,
                       y=waiting))
```
:::

::: {.fragment .fade-in fragment-index=1}
::: {.column width="120"}
::: {.absolute top="117" left="0"}
```{r}
#| echo: true
#| eval: false
# Load tidyverse into library
library(tidyverse)

# Create a blank ggplot canvas
ggplot(data=faithful) +

# Add a geometric (geom) layer and map variables to     
# aesthetics (aes) function
geom_point(mapping=aes(x=eruptions,
                       y=waiting,
                       color=eruptions < 3))
```
:::
:::
:::

::: {.fragment .fade-in fragment-index=2 .absolute top="90" left="100"}
```{r}
#| echo: false
#| eval: true
#| fig-width: 9
#| fig-height: 6
library(tidyverse)

# Create a blank ggplot canvas
ggplot(data=faithful) +

# Add a geometric (geom) layer and map variables to     
# aesthetics (aes) function
geom_point(mapping=aes(x=eruptions,
                       y=waiting,
                       color=eruptions < 3))
```
:::

## Topic 2: Static Visualizations {data-menu-title="map vs. set"}
![](images/ggplot2_10.png){.absolute top="52" right="0" width="35%"}
![](images/ggplot.png){.absolute bottom="150" right="0" width="35%"}

-   Layered approach to building graphics

-   Some things to remember:

    - Multiple ways to map variables
    - Multiple ways to change aesthetics
    
    ::: {.fragment fragment-index=1}
    1. [Mapping]{style="color:#edea2b"} an aesthetic (e.g., color)
    ```{r}
#| echo: true
#| eval: false
ggplot(data=faithful) +
    geom_point(mapping=aes(x=eruptions,
                           y=waiting,
                           color=eruptions < 3))
    ```
    :::
    
    ::: {.fragment fragment-index=2}
    2. [Setting]{style="color:#edea2b"} an aesthetic (e.g., color) 
    ```{r}
#| echo: true
#| eval: false
ggplot(data=faithful) +
    geom_point(mapping=aes(x=eruptions,
                           y=waiting),
               color='blue')
    ```
    :::
    
    ::: {.fragment fragment-index=4}
    2. [Setting]{style="color:#edea2b"} inside the `aes` function?
    ```{r}
#| echo: true
#| eval: false
ggplot(data=faithful) +
    geom_point(mapping=aes(x=eruptions,
                           y=waiting,
                           color='blue'))
    ```
    :::
    
::: {.fragment .fade-in-then-out fragment-index=3 .absolute top="90" left="100"}
```{r}
#| echo: false
#| eval: true
#| fig-width: 9
#| fig-height: 6
library(tidyverse)

# Create a blank ggplot canvas
ggplot(data=faithful) +

# Add a geometric (geom) layer and map variables to     
# aesthetics (aes) function
geom_point(mapping=aes(x=eruptions,
                       y=waiting),
                       color='blue')
```
:::

::: {.fragment .fade-in fragment-index=5 .absolute top="90" left="100"}
```{r}
#| echo: false
#| eval: true
#| fig-width: 9
#| fig-height: 6
library(tidyverse)

# Create a blank ggplot canvas
ggplot(data=faithful) +

# Add a geometric (geom) layer and map variables to     
# aesthetics (aes) function
geom_point(mapping=aes(x=eruptions,
                       y=waiting,
                       color='blue'))
```
:::

## Topic 2: Static Visualizations {data-menu-title="aes"}
![](images/ggplot2_10.png){.absolute top="52" right="0" width="35%"}
![](images/ggplot.png){.absolute bottom="150" right="0" width="35%"}

-   Layered approach to building graphics

-   Some things to remember:

    - [Multiple ways to map variables]{style="color:rgba(255,255,255, 0.3"}
    - [Multiple ways to change aesthetics]{style="color:rgba(255,255,255, 0.3"}
    - Aesthetics vary by geometry
    
    ::: {.fragment fragment-index=2}
    ```{r}
#| echo: true
#| eval: false
ggplot(data=faithful) +
    geom_point(mapping=aes(x=eruptions,
                           y=waiting,
                           color=eruptions < 3,
                           size=waiting),
               alpha=0.5)
    ```
    :::
    
::: {.fragment .fade-in-then-out fragment-index=1 .absolute top="40" left="0"}
![](images/geoms.png){width="650"}
:::

::: {.fragment .fade-in fragment-index=3 .absolute top="90" left="100"}
```{r}
#| echo: false
#| eval: true
#| fig-width: 9
#| fig-height: 6
ggplot(data=faithful) +
    geom_point(mapping=aes(x=eruptions,
                           y=waiting,
                           color=eruptions < 3,
                           size=waiting),
               alpha=0.5)
```
:::

## Topic 2: Static Visualizations {data-menu-title="stacking"}
![](images/ggplot2_10.png){.absolute top="52" right="0" width="35%"}
![](images/ggplot.png){.absolute bottom="150" right="0" width="35%"}

-   Layered approach to building graphics

-   Some things to remember:

    - [Multiple ways to map variables]{style="color:rgba(255,255,255, 0.3"}
    - [Multiple ways to change aesthetics]{style="color:rgba(255,255,255, 0.3"}
    - [Aesthetics vary by geometry]{style="color:rgba(255,255,255, 0.3"}
    - When stacking layers, order matters
    
    ::: {.fragment fragment-index=1}
    ```{r}
#| echo: true
#| eval: false
# Stacking layers (point then linear fit)
ggplot(data=faithful,
       mapping=aes(x=eruptions,y=waiting)) +
      geom_point() +
      geom_smooth(method='lm')
    ```
    :::
    
    ::: {.fragment fragment-index=3}
    ```{r}
#| echo: true
#| eval: false
# Stacking layers (linear fit then point)
ggplot(data=faithful,
       mapping=aes(x=eruptions,y=waiting)) +
      geom_smooth(method='lm') +
      geom_point()
    ```
    :::
    
::: {.fragment .fade-in-then-out fragment-index=2 .absolute top="90" left="100"}
```{r}
#| echo: false
#| eval: true
#| fig-width: 9
#| fig-height: 6
# Stacking layers (point then linear fit)
ggplot(data=faithful,
       mapping=aes(x=eruptions,y=waiting)) +
      geom_point() +
      geom_smooth(method='lm',size=4)
```
:::

::: {.fragment .fade-in fragment-index=4 .absolute top="90" left="100"}
```{r}
#| echo: false
#| eval: true
#| fig-width: 9
#| fig-height: 6
# Stacking layers (linear fit then point)
ggplot(data=faithful,
       mapping=aes(x=eruptions,y=waiting)) +
      geom_smooth(method='lm',size=4) +
      geom_point()
```
:::

## Topic 2: Static Visualizations {data-menu-title="geoms"}
![](images/ggplot2_10.png){.absolute top="52" right="0" width="35%"}
![](images/ggplot.png){.absolute bottom="150" right="0" width="35%"}

-   Layered approach to building graphics

-   Some things to remember:

    - [Multiple ways to map variables]{style="color:rgba(255,255,255, 0.3"}
    - [Multiple ways to change aesthetics]{style="color:rgba(255,255,255, 0.3"}
    - [Aesthetics vary by geometry]{style="color:rgba(255,255,255, 0.3"}
    - [When stacking layers, order matters]{style="color:rgba(255,255,255, 0.3"}
    - Many types of geoms, with different</br> mapping requirements
    
::: {.fragment .fade-in-then-out fragment-index=1 .absolute top="40" left="0"}
![](images/geoms.png){width="650"}
:::

## Topic 2: Static Visualizations {data-menu-title="theme"}
![](images/ggplot2_10.png){.absolute top="52" right="0" width="35%"}
![](images/ggplot.png){.absolute bottom="150" right="0" width="35%"}

-   Layered approach to building graphics

-   Some things to remember:

    - [Multiple ways to map variables]{style="color:rgba(255,255,255, 0.3"}
    - [Multiple ways to change aesthetics]{style="color:rgba(255,255,255, 0.3"}
    - [Aesthetics vary by geometry]{style="color:rgba(255,255,255, 0.3"}
    - [When stacking layers, order matters]{style="color:rgba(255,255,255, 0.3"}
    - [Many types of geoms, with different</br> mapping requirements]{style="color:rgba(255,255,255, 0.3"}
    - Many (many!) theme arguments
    
::: {.fragment .fade-in-then-out fragment-index=1 .absolute top="40" left="0"}
![](images/theme_args.png){width="60%"}
:::

::: {.fragment .fade-in fragment-index=2 .absolute top="55" left="0"}
```{r}
#| echo: true
#| eval: false
# Create overall plot object
plot <- ggplot(data=faithful,
               mapping=aes(x=eruptions,
                           y=waiting)) +
    geom_smooth(method="lm") +
    geom_point(size=0.5)

# Clean up overall plot theme
plot <- plot +
    theme(plot.background=element_blank(),
          panel.border=element_blank(),
          panel.background=element_blank(),
          axis.ticks=element_line(linewidth=0.25),
          axis.text=element_text(size = 8),
          axis.line=element_line(linewidth=0.25),
          axis.title=element_text(size = 10),
          plot.title=element_text(hjust=.5, size=10,
                                  face='bold')) +
    labs(title="Old Faithful Waiting Time",
         x="Length of eruption (minutes)",
         y="Waiting time to next eruption (minutes)")
```
:::

::: {.fragment .fade-in fragment-index=3 .absolute top="90" left="100"}
```{r}
#| echo: false
#| eval: true
#| fig-width: 9
#| fig-height: 6
# Create overall plot object
plot <- ggplot(data=faithful,
               mapping=aes(x=eruptions,
                           y=waiting)) +
    geom_smooth(method="lm") +
    geom_point(size=1)

# Clean up overall plot theme
plot +
    theme(plot.background=element_blank(),
          panel.border=element_blank(),
          panel.background=element_blank(),
          axis.ticks=element_line(linewidth=0.25),
          axis.text=element_text(size = 8),
          axis.line=element_line(linewidth=0.25),
          axis.title=element_text(size = 10),
          plot.title=element_text(hjust=.5, size=10, face='bold')) +
    labs(title="Old Faithful Waiting Time",
         x="Length of eruption (minutes)",
         y="Waiting time to next eruption (minutes)")
```
:::

## Exercise 1 - `ggplot2`: {data-background="#ffffff" data-menu-title="Exercise1"}

-   We just learned that `ggplot2` is an implementation of the "Grammar of Graphics" that uses a layered approach.

-   Complete the following script, by replacing `??????s`, to re-create the visualization of the relationship between penguin flipper length and body mass.

:::: columns
::: {.column width='45%'}
```{r style="font-size: 0.7em"}
#| echo: true
#| eval: false
library(palmerpenguins)
slice_head(penguins,n=3)
```

```{r style="font-size: 0.55em"}
#| echo: false
#| eval: true
library(palmerpenguins)
slice_head(penguins,n=3)
```

```{r style="font-size: 0.7em"}
#| echo: true
#| eval: false
# Visualize body mass by flipper length
penguins |> 
    drop_na() |> 
    ggplot(aes(x=??????,
               y=??????)) +
    geom_point(aes(color=??????)) +
    geom_smooth(method='lm',
                color=??????) +
    scale_y_continuous(limits=c(2500,6500),
                       breaks=seq(2500,6500,??????)) +
    scale_color_discrete(name='Penguin species:') +
    labs(x='Flipper length (mm)',
         y=??????) +
    theme_minimal() +
    theme(legend.position=??????)
```
:::
::: {.column width='55%'}
```{r}
#| echo: false
#| eval: true
#| fig-width: 9
#| fig-height: 6
library(palmerpenguins)
penguins |> 
    drop_na() |> 
    ggplot(aes(x=flipper_length_mm,
               y=body_mass_g)) +
    geom_point(aes(color=species)) +
    geom_smooth(method='lm',
                color='black') +
    scale_y_continuous(limits=c(2500,6500),
                       breaks=seq(2500,6500,1000)) +
    scale_color_discrete(name='Penguin species:') +
    labs(x='Flipper length (mm)',
         y='Body mass (g)') +
    theme_minimal() +
    theme(legend.position = 'top',
          legend.title=element_text(size = 14),
          legend.text=element_text(size = 12),
          axis.text=element_text(size = 12),
          axis.title=element_text(size = 14))
```
:::
::::

# Topic 2 {data-menu-title="Topic 2"}

[Static Visualizations - ggplot2 extensions]{style="font-size: 1.5em; text-align: center"}

## Topic 2: Static Visualizations - ggplot2 extensions {data-menu-title="extensions"}

-   `ggplot2` extensions

-   Extends the grammar of graphics

    - Developed by R users
    - Provides additional [functionality](https://exts.ggplot2.tidyverse.org/gallery/)

![](images/ggplot2_hex.png){.absolute top="52" right="0" width="30%"}

## Topic 2: Static Visualizations - ggplot2 extensions {data-menu-title="patchwork"}

-   `ggplot2` extensions

-   Extends the grammar of graphics

    - Developed by R users
    - Provides additional [functionality](https://exts.ggplot2.tidyverse.org/gallery/)

-   `patchwork`

    - Arrange multiple plots, using mathematical operators
    - Many approaches:
        - gridExtra::grid.arrange()
        - ggpubr::ggarrange()
        - cowplot::plot_grid()

![](images/patchwork_hex.png){.absolute top="52" right="0" width="30%"}
![](images/patchwork.png){.absolute bottom="0" right="0" width="35%"}

## Topic 2: Static Visualizations - ggplot2 extensions {data-menu-title="patchwork1"}

:::: columns
::: {.column width="50%"}
-   Establish plots:
```{r style="font-size: 0.85em"}
#| echo: true
#| eval: false
# Plot 1
plot1 <- penguins |> 
  drop_na() |> 
  ggplot(aes(x=flipper_length_mm,y=body_mass_g)) +
  geom_point(aes(color=species)) +
  geom_smooth(method='lm') +
  theme_minimal() +
  theme(legend.position='top',
        legend.title=element_blank())

# Plot 2
plot2 <- penguins |> 
  drop_na() |>
  ggplot(aes(x=species,y=body_mass_g)) +
  geom_boxplot(aes(color=species)) +
  theme_minimal() +
  theme(legend.position='none',
        legend.title=element_blank())
```
:::

::: {.column width="1%"}
:::

::: {.column width="49%"}
-   Patchwork together:
```{r}
#| echo: true
#| eval: false
library(patchwork)

# Side by side
plot1 + plot2
```
:::
::::

::: {.fragment .fade-in-then-out fragment-index=1 .absolute top="90" left="100"}
```{r}
#| echo: false
#| eval: true
#| fig-width: 9
#| fig-height: 6
library(palmerpenguins)
library(patchwork)

# Plot 1
plot1 <- penguins |> 
  drop_na() |> 
  ggplot(aes(x=flipper_length_mm,
             y=body_mass_g)) +
  geom_point(aes(color=species)) +
  geom_smooth(method='lm') +
  theme_minimal() +
  theme(legend.position='top',
        legend.title=element_blank())

# Plot 2
plot2 <- penguins |> 
  drop_na() |>
  ggplot(aes(x=species,
             y=body_mass_g)) +
  geom_boxplot(aes(color=species)) +
  theme_minimal() +
  theme(legend.position='none',
        legend.title=element_blank())

plot1 + plot2
```
:::

## Topic 2: Static Visualizations - ggplot2 extensions {data-menu-title="patchwork2"}

:::: columns
::: {.column width="50%"}
-   Establish plots:
```{r style="font-size: 0.85em"}
#| echo: true
#| eval: false
# Plot 1
plot1 <- penguins |> 
  drop_na() |> 
  ggplot(aes(x=flipper_length_mm,y=body_mass_g)) +
  geom_point(aes(color=species)) +
  geom_smooth(method='lm') +
  theme_minimal() +
  theme(legend.position='top',
        legend.title=element_blank())

# Plot 2
plot2 <- penguins |> 
  drop_na() |>
  ggplot(aes(x=species,y=body_mass_g)) +
  geom_boxplot(aes(color=species)) +
  theme_minimal() +
  theme(legend.position='none',
        legend.title=element_blank())
```
:::

::: {.column width="1%"}
:::

::: {.column width="49%"}
-   Patchwork together:
```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "6-7"
library(patchwork)

# Side by side
plot1 + plot2

# Stacked
plot1 / plot2
```
:::
::::

::: {.fragment .fade-in-then-out fragment-index=1 .absolute top="90" left="100"}
```{r}
#| echo: false
#| eval: true
#| fig-width: 9
#| fig-height: 6
library(palmerpenguins)
library(patchwork)

# Plot 1
plot1 <- penguins |> 
  drop_na() |> 
  ggplot(aes(x=flipper_length_mm,
             y=body_mass_g)) +
  geom_point(aes(color=species)) +
  geom_smooth(method='lm') +
  theme_minimal() +
  theme(legend.position='top',
        legend.title=element_blank())

# Plot 2
plot2 <- penguins |> 
  drop_na() |>
  ggplot(aes(x=species,
             y=body_mass_g)) +
  geom_boxplot(aes(color=species)) +
  theme_minimal() +
  theme(legend.position='none',
        legend.title=element_blank())

plot1 / plot2
```
:::

## Topic 2: Static Visualizations - ggplot2 extensions {data-menu-title="patchwork3"}

:::: columns
::: {.column width="50%"}
-   Establish plots:
```{r style="font-size: 0.85em"}
#| echo: true
#| eval: false
# Plot 1
plot1 <- penguins |> 
  drop_na() |> 
  ggplot(aes(x=flipper_length_mm,y=body_mass_g)) +
  geom_point(aes(color=species)) +
  geom_smooth(method='lm') +
  theme_minimal() +
  theme(legend.position='top',
        legend.title=element_blank())

# Plot 2
plot2 <- penguins |> 
  drop_na() |>
  ggplot(aes(x=species,y=body_mass_g)) +
  geom_boxplot(aes(color=species)) +
  theme_minimal() +
  theme(legend.position='none',
        legend.title=element_blank())

# Plot 3
plot3 <- penguins |> 
  drop_na() |>
  ggplot(aes(x=body_mass_g,fill=species)) +
  geom_histogram(alpha=0.5,position="identity") +
  theme_minimal() +
  theme(legend.position='none',
        legend.title=element_blank())
```
:::

::: {.column width="1%"}
:::

::: {.column width="49%"}
-   Patchwork together:
```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "9-10"
library(patchwork)

# Side by side
plot1 + plot2

# Stacked
plot1 / plot2

# Side by side and stacked
(plot1 + plot2) / plot3
```
:::
::::

::: {.fragment .fade-in-then-out fragment-index=1 .absolute top="90" left="100"}
```{r}
#| echo: false
#| eval: true
#| fig-width: 9
#| fig-height: 6
library(palmerpenguins)
library(patchwork)

penguins <- penguins |> drop_na()

plot1 <- ggplot(data=penguins,
                aes(x=flipper_length_mm,
                    y=body_mass_g)) +
    geom_point(aes(color=species)) +
    geom_smooth(method='lm') +
    theme_minimal() +
    theme(legend.position='top',
          legend.title=element_blank()) 

plot2 <- ggplot(data=penguins,
                aes(x=species,
                    y=body_mass_g)) +
    geom_boxplot(aes(color=species)) +
    theme_minimal() +
    theme(legend.position='none',
          legend.title=element_blank())

# Plot 3
plot3 <- ggplot(data=penguins,
                aes(x=body_mass_g,
                    fill=species)) +
  geom_histogram(alpha=0.5, 
                 position="identity") +
  theme_minimal() +
  theme(legend.position='none',
        legend.title=element_blank())
    
(plot1 + plot2) / plot3
```
:::

## Topic 2: Static Visualizations - ggplot2 extensions {data-menu-title="patchwork4"}

:::: columns
::: {.column width="50%"}
-   Establish plots:
```{r style="font-size: 0.85em"}
#| echo: true
#| eval: false
# Plot 1
plot1 <- penguins |> 
  drop_na() |> 
  ggplot(aes(x=flipper_length_mm,y=body_mass_g)) +
  geom_point(aes(color=species)) +
  geom_smooth(method='lm') +
  theme_minimal() +
  theme(legend.position='top',
        legend.title=element_blank())

# Plot 2
plot2 <- penguins |> 
  drop_na() |>
  ggplot(aes(x=species,y=body_mass_g)) +
  geom_boxplot(aes(color=species)) +
  theme_minimal() +
  theme(legend.position='none',
        legend.title=element_blank())

# Plot 3
plot3 <- penguins |> 
  drop_na() |>
  ggplot(aes(x=body_mass_g,fill=species)) +
  geom_histogram(alpha=0.5,position="identity") +
  theme_minimal() +
  theme(legend.position='none',
        legend.title=element_blank())
```
:::

::: {.column width="1%"}
:::

::: {.column width="49%"}
-   Patchwork together:
```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "12-14"
library(patchwork)

# Side by side
plot1 + plot2

# Stacked
plot1 / plot2

# Side by side and stacked
(plot1 + plot2) / plot3

# Side by side and stacked, with layout
(plot1 + plot2) / plot3 + 
  plot_layout(heights=c(2,1))
```
:::
::::

::: {.fragment .fade-in-then-out fragment-index=1 .absolute top="90" left="100"}
```{r}
#| echo: false
#| eval: true
#| fig-width: 9
#| fig-height: 6
library(palmerpenguins)
library(patchwork)

penguins <- penguins |> drop_na()

plot1 <- ggplot(data=penguins,
                aes(x=flipper_length_mm,
                    y=body_mass_g)) +
    geom_point(aes(color=species)) +
    geom_smooth(method='lm') +
    theme_minimal() +
    theme(legend.position='top',
          legend.title=element_blank()) 

plot2 <- ggplot(data=penguins,
                aes(x=species,
                    y=body_mass_g)) +
    geom_boxplot(aes(color=species)) +
    theme_minimal() +
    theme(legend.position='none',
          legend.title=element_blank())

# Plot 3
plot3 <- ggplot(data=penguins,
                aes(x=body_mass_g,
                    fill=species)) +
  geom_histogram(alpha=0.5, 
                 position="identity") +
  theme_minimal() +
  theme(legend.position='none',
        legend.title=element_blank())
    
(plot1 + plot2) / plot3 + plot_layout(heights=c(2,1))
```
:::

## Topic 2: Static Visualizations - ggplot2 extensions {data-menu-title="ggthemes"}
![](images/ggforce_hex.png){.absolute top="52" right="0" width="30%"}

-   `ggplot2` extensions

-   Extends the grammar of graphics

    - Developed by R users
    - Provides additional [functionality](https://exts.ggplot2.tidyverse.org/gallery/)

-   `patchwork`

-   `ggforce` and `ggthemes`

    - Provides extra geoms, scales, and themes
    
::: {.fragment .fade-in fragment-index=1}
::: {.column width="65%"}
```{r}
#| echo: true
#| eval: false
install.packages(ggthemes); library(ggthemes)
# Excel theme
p1 <- ggplot(data=penguins) +
    geom_point(aes(x=flipper_length_mm,
                   y=body_mass_g)) +
    theme_excel()
# Wall Street Journal theme
p2 <- p1 + theme_wsj()
# Google Docs theme
p3 <- p1 + theme_gdocs()
# Clean ggplot theme
p4 <- p1 + theme_clean()
# Patchwork
(p1 + p2) / (p3 + p4)
```
:::
:::

::: {.fragment .fade-in fragment-index=2 .absolute top="90" left="100"}
```{r}
#| echo: false
#| eval: true
#| fig-width: 9
#| fig-height: 6
library(palmerpenguins)
library(patchwork)
library(ggthemes)

p1 <- ggplot(data=penguins) +
    geom_point(aes(x=flipper_length_mm,
                   y=body_mass_g)) +
    theme_excel()
# Wall Street Journal theme
p2 <- p1 + theme_wsj()
# Google Docs theme
p3 <- p1 + theme_gdocs()
# Clean ggplot theme
p4 <- p1 + theme_clean()
# Patchwork
(p1 + p2) / (p3 + p4)
```
:::

## Topic 2: Static Visualizations - ggplot2 extensions {data-menu-title="ggstatsplot"}
![](images/ggstats_hex.png){.absolute top="52" right="0" width="30%"}

-   `ggplot2` extensions

-   Extends the grammar of graphics

    - Developed by R users
    - Provides additional [functionality](https://exts.ggplot2.tidyverse.org/gallery/)

-   `patchwork`

-   `ggforce` and `ggthemes`

-   `ggstatsplot`

    - Quickly combine plots with statistics

::: {.fragment .fade-in fragment-index=1}
::: {.column width="65%"}
```{r}
#| echo: true
#| eval: false
install.packages(ggstatsplot); library(ggstatsplot)

# Scatter plot stats
ggscatterstats(
    data=penguins,
    x=flipper_length_mm,
    y=body_mass_g,
    xlab="Flipper length (mm)",
    ylab="Body mass (g)",
    title="Relationship between penguin size and weight")
```
:::
:::

::: {.fragment .fade-in fragment-index=2 .absolute top="90" left="100"}
```{r}
#| echo: false
#| eval: true
#| fig-width: 9
#| fig-height: 6
library(ggstatsplot)

# Scatter plot stats
ggscatterstats(
    data=penguins,
    x=flipper_length_mm,
    y=body_mass_g,
    xlab="Flipper length (mm)",
    ylab="Body mass (g)",
    title="Relationship between penguin size and weight")
```
:::

# Topic 3 {data-menu-title="Topic 3"}

[Dynamic Visualizations]{style="font-size: 1.5em; text-align: center"}

## Topic 3: Dynamic Visualizations {data-menu-title="animation"}

![](images/gapminder.gif)

## Topic 3: Dynamic Visualizations {data-menu-title="gapminder"}
![](images/gapminder2.png){.absolute top="52" right="0" width="350"}

-   Life expectancy (`gapminder`) dataset:

    - Data from the Gapminder foundation
    - Geography (country and continent)
    - Demographic data (lifeExp and pop)
    - Economic data (gdpPercap)
    - Time (year)
    
::: {.column width="65%"}
```{r}
#| echo: true
#| eval: false
install.packages('gapminder')
library(gapminder)

slice_head(gapminder, n=5)
```

```{r}
#| echo: false
#| eval: true
library(gapminder)
slice_head(gapminder, n=5)
```
:::

## Topic 3: Dynamic Visualizations {data-menu-title="gganimate"}
![](images/gganimate_hex.png){.absolute top="52" right="0" width="30%"}

-   `ggplot2` extensions

-   Extends the grammar of graphics

    - Developed by R users
    - Provides additional [functionality](https://exts.ggplot2.tidyverse.org/gallery/)

-   `patchwork`

-   `ggforce` and `ggthemes`

-   `ggstatsplot`

-   `gganimate`

    - New grammar classes (functions)
    - How a plot should change with time

## Topic 3: Dynamic Visualizations {data-menu-title="gganimate" auto-animate="true"}

```{r style="font-size: 0.85em"}
#| echo: true
#| eval: false
# Use the gapminder dataset in ggplot
anim <- ggplot(data=gapminder,
               aes(x=gdpPercap, y=lifeExp, size=pop, color=country)) +
    # Add a point geom
    geom_point(alpha=0.7, show.legend=FALSE)

anim
```

::: {.fragment .fade-in fragment-index=1 .absolute top="90" left="100"}
```{r}
#| echo: false
#| eval: true
#| fig-width: 9
#| fig-height: 6
# Use the gapminder dataset in ggplot
anim <- ggplot(data=gapminder,
               aes(x=gdpPercap, y=lifeExp, size=pop, color=country)) +
    # Add a point geom
    geom_point(alpha=0.7, show.legend=FALSE)

anim
```
:::

## Topic 3: Dynamic Visualizations {data-menu-title="gganimate" auto-animate="true"}

```{r style="font-size: 0.85em"}
#| echo: true
#| eval: false
# Use the gapminder dataset in ggplot
anim <- ggplot(data=gapminder,
               aes(x=gdpPercap, y=lifeExp, size=pop, color=country)) +
    # Add a point geom
    geom_point(alpha=0.7, show.legend=FALSE) +
    # Add some manual scaling and facets
    scale_colour_manual(values=country_colors) +
    scale_size(range=c(2, 12)) +
    scale_x_log10() +
    facet_wrap(~continent, nrow=1)

anim
```

::: {.fragment .fade-in fragment-index=1 .absolute top="90" left="100"}
```{r}
#| echo: false
#| eval: true
#| fig-width: 9
#| fig-height: 6
# Use the gapminder dataset in ggplot
anim <- ggplot(data=gapminder,
               aes(x=gdpPercap, y=lifeExp, size=pop, color=country)) +
    # Add a point geom
    geom_point(alpha=0.7, show.legend=FALSE) +
    # Add some manual scaling and facets
    scale_colour_manual(values=country_colors) +
    scale_size(range=c(2, 12)) +
    scale_x_log10() +
    facet_wrap(~continent, nrow=1)

anim
```
:::

## Topic 3: Dynamic Visualizations {data-menu-title="gganimate" auto-animate="true"}

```{r style="font-size: 0.85em"}
#| echo: true
#| eval: false
# Use the gapminder dataset in ggplot
anim <- ggplot(data=gapminder,
               aes(x=gdpPercap, y=lifeExp, size=pop, color=country)) +
    # Add a point geom
    geom_point(alpha=0.7, show.legend=FALSE) +
    # Add some manual scaling and facets
    scale_colour_manual(values=country_colors) +
    scale_size(range=c(2, 12)) +
    scale_x_log10() +
    facet_wrap(~continent, nrow=1) +
    # Animate figure with gganimate package
    transition_time(year) +
    ease_aes('linear') +
    labs(title='Year: {frame_time}', 
         x='GDP per capita', 
         y='Life expectancy at birth') +

anim
```

::: {.fragment .fade-in fragment-index=1 .absolute top="90" left="100"}
![](images/gapminder_gif1.gif)
:::

## Topic 3: Dynamic Visualizations {data-menu-title="gganimate" auto-animate="true"}

```{r style="font-size: 0.85em"}
#| echo: true
#| eval: false
# Use the gapminder dataset in ggplot
anim <- ggplot(data=gapminder,
               aes(x=gdpPercap, y=lifeExp, size=pop, color=country)) +
    # Add a point geom
    geom_point(alpha=0.7, show.legend=FALSE) +
    # Add some manual scaling and facets
    scale_colour_manual(values=country_colors) +
    scale_size(range=c(2, 12)) +
    scale_x_log10() +
    facet_wrap(~continent, nrow=1) +
    # Animate figure with gganimate package
    transition_time(year) +
    ease_aes('linear') +
    labs(title='Year: {frame_time}', 
         x='GDP per capita', 
         y='Life expectancy at birth') +
    # Add some theme
    theme(panel.background=element_rect(color="black", fill="lightyellow", size=0.25),
          panel.grid=element_blank(),
          plot.title=element_text(size=9, color="black"),
          strip.background=element_rect(color="black", size=0.25),
          axis.ticks=element_line(size=0.25),
          axis.text=element_text(size=7, color="black"),
          axis.title=element_text(size=8, color="black"))

# Export animated gif
options(gganimate.dev_args = list(width = 2100, height = 900, res = 300))
anim_save(anim, filename="gapminder.gif")

```

::: {.fragment .fade-in fragment-index=1 .absolute top="90" left="100"}
![](images/gapminder.gif)
:::

# Topic 3 {data-menu-title="Topic 3"}

[Dynamic Visualizations - ggplot2 integrations]{style="font-size: 1.5em; text-align: center"}

## Topic 3: Dynamic Visualizations - ggplot2 integrations {data-menu-title="integrations"}

-   `ggplot2` integrations

-   Packages that integrate with `ggplot2` objects

    - Used as required arguments

![](images/ggplot2_hex.png){.absolute top="52" right="0" width="30%"}

## Topic 3: Dynamic Visualizations - ggplot2 integrations {data-menu-title="integrations"}

-   `ggplot2` integrations

-   Packages that integrate with `ggplot2` objects

    - Used as required arguments

-   `plotly`

    - Creates interactive web graphics
    - Customizable user interface

![](images/plotly_logo.png){.absolute top="52" right="0" width="30%"}

## Topic 3: Dynamic Visualizations - ggplot2 integrations {data-menu-title="integrations"}

```{css, echo = FALSE}
.output {
max-height: 800px;
overflow-y: visible;
}
```

```{r}
#| echo: false
#| eval: true
#| class: output
library(plotly)
library(widgetframe)
theme <- theme(panel.background=element_rect(color="black", fill="lightyellow", size=0.25),
               panel.grid=element_blank(),
               plot.title=element_text(size=9, color="black"),
               strip.background=element_rect(color="black", size=0.25),
               axis.ticks=element_line(size=0.25),
               axis.text=element_text(size=7, color="black"),
               axis.title=element_text(size=8, color="black"),
               legend.title=element_text(size=8, color="black"),
               legend.text=element_text(size=7, color="black"),
               legend.justification="top",
               legend.key=element_rect(color="black", fill="lightyellow", size=0.1))

p9 <- ggplot(data=gapminder, 
             aes(x=gdpPercap, y=lifeExp, size=pop, color=continent)) +
    # Add a point geom
    geom_point(alpha=0.7, show.legend=FALSE, aes(frame = year, ids = country)) +
    # Add some manual scaling
    scale_colour_manual(values=continent_colors) +
    scale_size(range=c(2, 12)) +
    scale_x_log10() +
    labs(x='GDP per capita', 
         y='Life expectancy at birth') +
    theme

fig <- ggplotly(p9, height=500, width=800) %>%
    animation_opts(
        1000, easing = "linear", redraw = FALSE) %>%
    animation_slider(
        currentvalue=list(prefix="YEAR ",
                          font=list(color="red"),
                          xanchor='left',
                          yanchor='top')) %>%
    animation_button(
        x = 1, xanchor = "right", y = -0.2, yanchor = "bottom"
    )
fig
#frameWidget(fig, height=550, width=800)
```