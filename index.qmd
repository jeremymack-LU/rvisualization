---
title: "Data Visualization with R <br/><br/><br/><br/><br/>"
title-slide-attributes:
    data-background-image: images/lts_logo.jpg
    data-background-size: "30%"
    data-background-opacity: "0.90"
    data-background-position: "50% 45%"
format:
   revealjs:
     theme: [dark, custom.scss]
     code-fold: false
     slide-number: c
     controls: true
     css: custom.css
     menu: {
      side: 'left',
      numbers: true,
      markers: true,
      width: 'normal',
      hideMissingTitles: true,
      titleSelector: ''}
preview-links: auto
---

## About this presentation {data-menu-title="About"}

::: columns
-   This seminar is the third in a series on [**R programming**]{style="color:#edea2b"}.

-   It's targeted at people that took the previous seminars, or have programming experience.

::: fragment
-   By the end of this presentation, you should know about...

    1.  The Grammar of Graphics
    2.  Static Visualizations
        - Graphical and tabular
    3.  Dynamic Visualizations
        - Graphical and tabular
:::

::: fragment
-   Raw code available on [Github](https://github.com/jeremymack-LU/rvisualization/blob/main/index.qmd)
:::
:::

![](images/ggplot2_masterpiece.png){.absolute bottom="0" right="0" width="400"}

## Structure of the presentation {data-menu-title="Presentation outline"}

The presentation is split into five topics:

::: fragment
-   Topic 1:    The (layered) Grammar of Graphics
:::

::: fragment
-   Topic 2:    Static visualizations

-   Topic 3:    Dynamic visualizations

-   Topic 4:    Shiny Apps - a preview
:::

::: fragment
-   Topic 5:    Additional resources
:::

![](images/r_learners.png){.absolute bottom="0" right="0" width="50%" height="50%"}

## Data visualization with R {data-menu-title="Data workflow"}

::: {.r-stack}
![](images/data-science-wrangle1.png)

![](images/data-science-wrangle2.png){.fragment}

![](images/data-science-wrangle3.png){.fragment}

![](images/data-science-wrangle1.png){.fragment}

![](images/data-science-tidy.png){.fragment}
:::

## Data visualization with R {data-menu-title="Dinosaur"}
<br/>
<center><b>“The simple graph has brought more information to the data analyst’s mind<br/>than any other device.” - John Tukey</b></center>
<br/>
<center><img src="./images/dinosaur2.gif" alt="gif" height=200</></center>

# Topic 1 {data-menu-title="Topic 1"}

[The ([**layered**]{style="color:#edea2b"}) Grammar of Graphics]{style="font-size: 1.5em; text-align: center"}

## The ([**layered**]{style="color:#edea2b"}) Grammar of Graphics {data-menu-title="Grammar of Graphics"}

-   *The Grammar of Graphics*

-   Structure of data graphics

-   Foundation for modern applications and graphing software

    - Tableau
    - Vega-Lite
    - `ggplot2`

![](images/grammar.png){.absolute top="52" right="0" width="30%"}

## The ([**layered**]{style="color:#edea2b"}) Grammar of Graphics {data-menu-title="ggplot2"}

-   Tidyverse package - `ggplot2`

-   Implementation of the grammar of graphics

::: {.fragment .fade-out fragment-index=1} 
![](images/ggplot2_hex.png){.absolute top="52" right="0" width="30%"}
:::

::: {.fragment .fade-in-then-out fragment-index=1} 
-   Layered approach to building graphics
    
    - Data creates the base (tidy format)

![](images/ggplot2_2.png){.absolute top="52" right="0" width="35%"}
:::

::: {.fragment .fade-in-then-out fragment-index=2}

![](images/ggplot2_3.png){.absolute top="52" right="0" width="35%"}

::: {.absolute top="172" left="0"}
-   Layered approach to building graphics
    
    - [Data creates the base (tidy format)]{style="color:rgba(255,255,255, 0.3"}
    - Link variables to graphical properties
    
:::
:::

::: {.fragment .fade-in-then-out fragment-index=3}

![](images/ggplot2_4.png){.absolute top="52" right="0" width="35%"}

::: {.absolute top="172" left="0"}
-   Layered approach to building graphics
    
    - [Data creates the base (tidy format)]{style="color:rgba(255,255,255, 0.3"}
    - [Link variables to graphical properties]{style="color:rgba(255,255,255, 0.3"}
    - Transform data to displayed values

:::
:::

::: {.fragment .fade-in-then-out fragment-index=4}

![](images/ggplot2_5.png){.absolute top="52" right="0" width="35%"}

::: {.absolute top="172" left="0"}
-   Layered approach to building graphics
    
    - [Data creates the base (tidy format)]{style="color:rgba(255,255,255, 0.3"}
    - [Link variables to graphical properties]{style="color:rgba(255,255,255, 0.3"}
    - [Transform data to displayed values]{style="color:rgba(255,255,255, 0.3"}
    - Variable and property ranges

:::
:::

::: {.fragment .fade-in-then-out fragment-index=5}

![](images/ggplot2_6.png){.absolute top="52" right="0" width="35%"}

::: {.absolute top="172" left="0"}
-   Layered approach to building graphics
    
    - [Data creates the base (tidy format)]{style="color:rgba(255,255,255, 0.3"}
    - [Link variables to graphical properties]{style="color:rgba(255,255,255, 0.3"}
    - [Transform data to displayed values]{style="color:rgba(255,255,255, 0.3"}
    - [Variable and property ranges]{style="color:rgba(255,255,255, 0.3"}
    - Graphical representation of the data

:::
:::

::: {.fragment .fade-in-then-out fragment-index=6}

![](images/ggplot2_7.png){.absolute top="52" right="0" width="35%"}

::: {.absolute top="172" left="0"}
-   Layered approach to building graphics
    
    - [Data creates the base (tidy format)]{style="color:rgba(255,255,255, 0.3"}
    - [Link variables to graphical properties]{style="color:rgba(255,255,255, 0.3"}
    - [Transform data to displayed values]{style="color:rgba(255,255,255, 0.3"}
    - [Variable and property ranges]{style="color:rgba(255,255,255, 0.3"}
    - [Graphical representation of the data]{style="color:rgba(255,255,255, 0.3"}
    - Creates "small multiples"

:::
:::

::: {.fragment .fade-in-then-out fragment-index=7}

![](images/ggplot2_8.png){.absolute top="52" right="0" width="35%"}

::: {.absolute top="172" left="0"}
-   Layered approach to building graphics
    
    - [Data creates the base (tidy format)]{style="color:rgba(255,255,255, 0.3"}
    - [Link variables to graphical properties]{style="color:rgba(255,255,255, 0.3"}
    - [Transform data to displayed values]{style="color:rgba(255,255,255, 0.3"}
    - [Variable and property ranges]{style="color:rgba(255,255,255, 0.3"}
    - [Graphical representation of the data]{style="color:rgba(255,255,255, 0.3"}
    - [Creates "small multiples"]{style="color:rgba(255,255,255, 0.3"}
    - Sets unique position

:::
:::

::: {.fragment .fade-in fragment-index=8}

![](images/ggplot2_9.png){.absolute top="52" right="0" width="35%"}

::: {.absolute top="172" left="0"}
-   Layered approach to building graphics
    
    - [Data creates the base (tidy format)]{style="color:rgba(255,255,255, 0.3"}
    - [Link variables to graphical properties]{style="color:rgba(255,255,255, 0.3"}
    - [Transform data to displayed values]{style="color:rgba(255,255,255, 0.3"}
    - [Variable and property ranges]{style="color:rgba(255,255,255, 0.3"}
    - [Graphical representation of the data]{style="color:rgba(255,255,255, 0.3"}
    - [Creates "small multiples"]{style="color:rgba(255,255,255, 0.3"}
    - [Sets unique position]{style="color:rgba(255,255,255, 0.3"}
    - Defines the overall look of the plot

:::
:::

## The ([**layered**]{style="color:#edea2b"}) Grammar of Graphics {data-menu-title="ggplot2"}

![](images/ggplot2_10.png){.absolute top="52" right="0" width="35%"}

-   Tidyverse package - `ggplot2`

-   Implementation of the grammar of graphics

-   Layered approach to building graphics

    - Required arguments
    - Everything else has [**sensible defaults**]{style="color:#edea2b"}
    
::: fragment

![](images/ggplot.png){.absolute bottom="150" right="0" width="35%"}

-   Basic template has three functions:

    - `ggplot` - creates a blank canvas
    - `geom` - adds a layer
    - `aes` - visual properties of an object
:::

# Topic 2 {data-menu-title="Topic 2"}

[Static Visualizations]{style="font-size: 1.5em; text-align: center"}

## Topic 2: Static Visualizations {data-menu-title="Faithful"}
![](images/faithful_geyser.jpg){.absolute top="52" right="0" width="30%"}

-   Old Faithful dataset:

    - Geyser in Yellowstone National Park
    - Length of eruption time in minutes (eruptions)
    - Time until next eruption (waiting)

::: fragment
::: {.column width="60%"}
```{r}
#| echo: true
#| eval: true
tibble::as_tibble(faithful)
```
:::
:::

## Topic 2: Static Visualizations {data-menu-title="ggplot"}
![](images/ggplot2_10.png){.absolute top="52" right="0" width="35%"}
![](images/ggplot.png){.absolute bottom="150" right="0" width="35%"}

-   Layered approach to building graphics:

::: {.fragment .fade-in fragment-index=1}
::: {.column width="60%"}
```{r}
#| echo: true
#| eval: false
# Load tidyverse into library
library(tidyverse)

# Create a blank ggplot canvas
ggplot(data=faithful)
```
:::
:::


::: {.fragment .fade-in-then-out fragment-index=2 .absolute top="90" left="100"}
```{r}
#| echo: false
#| eval: true
#| fig-width: 9
#| fig-height: 6
library(tidyverse)
ggplot(data=faithful)
```
:::

::: {.fragment .fade-in fragment-index=3}
::: {.column width="120"}
::: {.absolute top="117" left="0"}
```{r}
#| echo: true
#| eval: false
# Load tidyverse into library
library(tidyverse)

# Create a blank ggplot canvas
ggplot(data=faithful) +

# Add a geometric (geom) layer and map variables to     
# aesthetics (aes) function
geom_point(mapping=aes(x=eruptions,
                       y=waiting))
```
:::
:::
:::

::: {.fragment .fade-in-then-out fragment-index=4 .absolute top="90" left="100"}
```{r}
#| echo: false
#| eval: true
#| fig-width: 9
#| fig-height: 6
library(tidyverse)

# Create a blank ggplot canvas
ggplot(data=faithful) +

# Add a geometric (geom) layer and map variables to
# aesthetics (aes) function
geom_point(mapping=aes(x=eruptions,
                       y=waiting))
```
:::

## Topic 2: Static Visualizations {data-menu-title="ggplot"}
![](images/ggplot2_10.png){.absolute top="52" right="0" width="35%"}
![](images/ggplot.png){.absolute bottom="150" right="0" width="35%"}

-   Layered approach to building graphics

-   Some things to remember:

    - Multiple ways to map variables
    
    ::: fragment
    1. Split mappings
    ```{r}
#| echo: true
#| eval: false
ggplot(data=faithful) +
geom_point(mapping=aes(x=eruptions,y=waiting))
    ```
    :::
    
    ::: fragment
    2. Mappings in `ggplot` function
    ```{r}
#| echo: true
#| eval: false
ggplot(
  data=faithful,
  mapping=aes(x=eruptions,y=waiting)) +
geom_point()
    ```
    :::
    
    ::: fragment
    3. Mappings in `geom` function
    ```{r}
#| echo: true
#| eval: false
ggplot() +
geom_point(
  data=faithful,
  mapping=aes(x=eruptions,y=waiting))
    ```
    :::
    
## Topic 2: Static Visualizations {data-menu-title="ggplot"}
![](images/ggplot2_10.png){.absolute top="52" right="0" width="35%"}
![](images/ggplot.png){.absolute bottom="150" right="0" width="35%"}

-   Layered approach to building graphics:

::: {.column width="60%"}
```{r}
#| echo: true
#| eval: false
# Load tidyverse into library
library(tidyverse)

# Create a blank ggplot canvas
ggplot(data=faithful) +

# Add a geometric (geom) layer and map variables to
# aesthetics (aes) function
geom_point(mapping=aes(x=eruptions,
                       y=waiting))
```
:::

::: {.fragment .fade-in fragment-index=1}
::: {.column width="120"}
::: {.absolute top="117" left="0"}
```{r}
#| echo: true
#| eval: false
# Load tidyverse into library
library(tidyverse)

# Create a blank ggplot canvas
ggplot(data=faithful) +

# Add a geometric (geom) layer and map variables to     
# aesthetics (aes) function
geom_point(mapping=aes(x=eruptions,
                       y=waiting,
                       color=eruptions < 3))
```
:::
:::
:::

::: {.fragment .fade-in fragment-index=2 .absolute top="90" left="100"}
```{r}
#| echo: false
#| eval: true
#| fig-width: 9
#| fig-height: 6
library(tidyverse)

# Create a blank ggplot canvas
ggplot(data=faithful) +

# Add a geometric (geom) layer and map variables to     
# aesthetics (aes) function
geom_point(mapping=aes(x=eruptions,
                       y=waiting,
                       color=eruptions < 3))
```
:::

## Topic 2: Static Visualizations {data-menu-title="ggplot"}
![](images/ggplot2_10.png){.absolute top="52" right="0" width="35%"}
![](images/ggplot.png){.absolute bottom="150" right="0" width="35%"}

-   Layered approach to building graphics

-   Some things to remember:

    - Multiple ways to map variables
    - Multiple ways to change aesthetics
    
    ::: {.fragment fragment-index=1}
    1. [Mapping]{style="color:#edea2b"} an aesthetic (e.g., color)
    ```{r}
#| echo: true
#| eval: false
ggplot(data=faithful) +
    geom_point(mapping=aes(x=eruptions,
                           y=waiting,
                           color=eruptions < 3))
    ```
    :::
    
    ::: {.fragment fragment-index=2}
    2. [Setting]{style="color:#edea2b"} an aesthetic (e.g., color) 
    ```{r}
#| echo: true
#| eval: false
ggplot(data=faithful) +
    geom_point(mapping=aes(x=eruptions,
                           y=waiting),
               color='blue')
    ```
    :::
    
    ::: {.fragment fragment-index=4}
    2. [Setting]{style="color:#edea2b"} inside the `aes` function?
    ```{r}
#| echo: true
#| eval: false
ggplot(data=faithful) +
    geom_point(mapping=aes(x=eruptions,
                           y=waiting,
                           color='blue'))
    ```
    :::
    
::: {.fragment .fade-in-then-out fragment-index=3 .absolute top="90" left="100"}
```{r}
#| echo: false
#| eval: true
#| fig-width: 9
#| fig-height: 6
library(tidyverse)

# Create a blank ggplot canvas
ggplot(data=faithful) +

# Add a geometric (geom) layer and map variables to     
# aesthetics (aes) function
geom_point(mapping=aes(x=eruptions,
                       y=waiting),
                       color='blue')
```
:::

::: {.fragment .fade-in fragment-index=5 .absolute top="90" left="100"}
```{r}
#| echo: false
#| eval: true
#| fig-width: 9
#| fig-height: 6
library(tidyverse)

# Create a blank ggplot canvas
ggplot(data=faithful) +

# Add a geometric (geom) layer and map variables to     
# aesthetics (aes) function
geom_point(mapping=aes(x=eruptions,
                       y=waiting,
                       color='blue'))
```
:::

## Topic 2: Static Visualizations {data-menu-title="ggplot"}
![](images/ggplot2_10.png){.absolute top="52" right="0" width="35%"}
![](images/ggplot.png){.absolute bottom="150" right="0" width="35%"}

-   Layered approach to building graphics

-   Some things to remember:

    - [Multiple ways to map variables]{style="color:rgba(255,255,255, 0.3"}
    - [Multiple ways to change aesthetics]{style="color:rgba(255,255,255, 0.3"}
    - Aesthetics vary by geometry
    
    ::: {.fragment fragment-index=2}
    ```{r}
#| echo: true
#| eval: false
ggplot(data=faithful) +
    geom_point(mapping=aes(x=eruptions,
                           y=waiting,
                           color=eruptions < 3,
                           size=waiting),
               alpha=0.5)
    ```
    :::
    
::: {.fragment .fade-in-then-out fragment-index=1 .absolute top="40" left="0"}
![](images/geoms.png){width="650"}
:::

::: {.fragment .fade-in fragment-index=3 .absolute top="90" left="100"}
```{r}
#| echo: false
#| eval: true
#| fig-width: 9
#| fig-height: 6
ggplot(data=faithful) +
    geom_point(mapping=aes(x=eruptions,
                           y=waiting,
                           color=eruptions < 3,
                           size=waiting),
               alpha=0.5)
```
:::

## Topic 2: Static Visualizations {data-menu-title="ggplot"}
![](images/ggplot2_10.png){.absolute top="52" right="0" width="35%"}
![](images/ggplot.png){.absolute bottom="150" right="0" width="35%"}

-   Layered approach to building graphics

-   Some things to remember:

    - [Multiple ways to map variables]{style="color:rgba(255,255,255, 0.3"}
    - [Multiple ways to change aesthetics]{style="color:rgba(255,255,255, 0.3"}
    - [Aesthetics vary by geometry]{style="color:rgba(255,255,255, 0.3"}
    - When stacking layers, order matters
    
    ::: {.fragment fragment-index=1}
    ```{r}
#| echo: true
#| eval: false
# Stacking layers (point then linear fit)
ggplot(data=faithful,
       mapping=aes(x=eruptions,y=waiting)) +
      geom_point() +
      geom_smooth(method='lm')
    ```
    :::
    
    ::: {.fragment fragment-index=3}
    ```{r}
#| echo: true
#| eval: false
# Stacking layers (linear fit then point)
ggplot(data=faithful,
       mapping=aes(x=eruptions,y=waiting)) +
      geom_smooth(method='lm') +
      geom_point()
    ```
    :::
    
::: {.fragment .fade-in-then-out fragment-index=2 .absolute top="90" left="100"}
```{r}
#| echo: false
#| eval: true
#| fig-width: 9
#| fig-height: 6
# Stacking layers (point then linear fit)
ggplot(data=faithful,
       mapping=aes(x=eruptions,y=waiting)) +
      geom_point() +
      geom_smooth(method='lm',size=4)
```
:::

::: {.fragment .fade-in fragment-index=4 .absolute top="90" left="100"}
```{r}
#| echo: false
#| eval: true
#| fig-width: 9
#| fig-height: 6
# Stacking layers (linear fit then point)
ggplot(data=faithful,
       mapping=aes(x=eruptions,y=waiting)) +
      geom_smooth(method='lm',size=4) +
      geom_point()
```
:::

## Topic 2: Static Visualizations {data-menu-title="ggplot"}
![](images/ggplot2_10.png){.absolute top="52" right="0" width="35%"}
![](images/ggplot.png){.absolute bottom="150" right="0" width="35%"}

-   Layered approach to building graphics

-   Some things to remember:

    - [Multiple ways to map variables]{style="color:rgba(255,255,255, 0.3"}
    - [Multiple ways to change aesthetics]{style="color:rgba(255,255,255, 0.3"}
    - [Aesthetics vary by geometry]{style="color:rgba(255,255,255, 0.3"}
    - [When stacking layers, order matters]{style="color:rgba(255,255,255, 0.3"}
    - Many types of geoms, with different</br> mapping requirements
    
::: {.fragment .fade-in-then-out fragment-index=1 .absolute top="40" left="0"}
![](images/geoms.png){width="650"}
:::

## Topic 2: Static Visualizations {data-menu-title="ggplot"}
![](images/ggplot2_10.png){.absolute top="52" right="0" width="35%"}
![](images/ggplot.png){.absolute bottom="150" right="0" width="35%"}

-   Layered approach to building graphics

-   Some things to remember:

    - [Multiple ways to map variables]{style="color:rgba(255,255,255, 0.3"}
    - [Multiple ways to change aesthetics]{style="color:rgba(255,255,255, 0.3"}
    - [Aesthetics vary by geometry]{style="color:rgba(255,255,255, 0.3"}
    - [When stacking layers, order matters]{style="color:rgba(255,255,255, 0.3"}
    - [Many types of geoms, with different</br> mapping requirements]{style="color:rgba(255,255,255, 0.3"}
    - Many (many!) theme arguments
    
::: {.fragment .fade-in-then-out fragment-index=1 .absolute top="40" left="0"}
![](images/theme_args.png){width="60%"}
:::

::: {.fragment .fade-in fragment-index=2 .absolute top="55" left="0"}
```{r}
#| echo: true
#| eval: false
# Create overall plot object
plot <- ggplot(data=faithful,
               mapping=aes(x=eruptions,
                           y=waiting)) +
    geom_smooth(method="lm") +
    geom_point(size=0.5)

# Clean up overall plot theme
plot <- plot +
    theme(plot.background=element_blank(),
          panel.border=element_blank(),
          panel.background=element_blank(),
          axis.ticks=element_line(linewidth=0.25),
          axis.text=element_text(size = 8),
          axis.line=element_line(linewidth=0.25),
          axis.title=element_text(size = 10),
          plot.title=element_text(hjust=.5, size=10,
                                  face='bold')) +
    labs(title="Old Faithful Waiting Time",
         x="Length of eruption (minutes)",
         y="Waiting time to next eruption (minutes)")
```
:::

::: {.fragment .fade-in fragment-index=3 .absolute top="90" left="100"}
```{r}
#| echo: false
#| eval: true
#| fig-width: 9
#| fig-height: 6
# Create overall plot object
plot <- ggplot(data=faithful,
               mapping=aes(x=eruptions,
                           y=waiting)) +
    geom_smooth(method="lm") +
    geom_point(size=1)

# Clean up overall plot theme
plot +
    theme(plot.background=element_blank(),
          panel.border=element_blank(),
          panel.background=element_blank(),
          axis.ticks=element_line(linewidth=0.25),
          axis.text=element_text(size = 8),
          axis.line=element_line(linewidth=0.25),
          axis.title=element_text(size = 10),
          plot.title=element_text(hjust=.5, size=10, face='bold')) +
    labs(title="Old Faithful Waiting Time",
         x="Length of eruption (minutes)",
         y="Waiting time to next eruption (minutes)")
```
:::

## Exercise 1 - `ggplot2`: {data-background="#ffffff" data-menu-title="Exercise1"}

-   We just learned that `ggplot2` is an implementation of the "Grammar of Graphics" that uses a layered approach.

-   Complete the following script, to re-create the visualization of the relationship between penguin flipper length and body mass.

:::: columns
::: {.column width='45%'}
```{r style="font-size: 0.7em"}
#| echo: true
#| eval: false
library(palmerpenguins)
slice_head(penguins,n=3)
```

```{r style="font-size: 0.55em"}
#| echo: false
#| eval: true
library(palmerpenguins)
slice_head(penguins,n=3)
```

```{r style="font-size: 0.7em"}
#| echo: true
#| eval: false
# Visualize body mass by flipper length
penguins |> 
    drop_na() |> 
    ggplot(aes(x=??????,
               y=??????)) +
    geom_point(aes(color=??????)) +
    geom_smooth(method='lm',
                color=??????) +
    scale_y_continuous(limits=c(2500,6500),
                       breaks=seq(2500,6500,??????)) +
    scale_color_discrete(name='Penguin species:') +
    labs(x='Flipper length (mm)',
         y=??????) +
    theme_minimal() +
    theme(legend.position = ??????)
```
:::
::: {.column width='55%'}
```{r}
#| echo: false
#| eval: true
#| fig-width: 9
#| fig-height: 6
library(palmerpenguins)
penguins |> 
    drop_na() |> 
    ggplot(aes(x=flipper_length_mm,
               y=body_mass_g)) +
    geom_point(aes(color=species)) +
    geom_smooth(method='lm',
                color='black') +
    scale_y_continuous(limits=c(2500,6500),
                       breaks=seq(2500,6500,1000)) +
    scale_color_discrete(name='Penguin species:') +
    labs(x='Flipper length (mm)',
         y='Body mass (g)') +
    theme_minimal() +
    theme(legend.position = 'top',
          legend.title=element_text(size = 14),
          legend.text=element_text(size = 12),
          axis.text=element_text(size = 12),
          axis.title=element_text(size = 14))
```
:::
::::